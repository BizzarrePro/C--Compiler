 --------------------------------------------------
|               Predictive Analytics               |
 --------------------------------------------------
-Top of Stack-
[program]
-Bottom of Stack-

Push:
	declaration-list

-Top of Stack-
[declaration-list]
-Bottom of Stack-

Push:
	declaration-list`
	declaration

-Top of Stack-
[declaration-list`]
[declaration]
-Bottom of Stack-

Push:
	general-declaration
	ID
	type-specifier

-Top of Stack-
[declaration-list`]
[general-declaration]
[ID]
[type-specifier]
-Bottom of Stack-

Push:
	int

-Top of Stack-
[declaration-list`]
[general-declaration]
[ID]
[int]
-Bottom of Stack-

[int] matches [Token: [ int ] Line: 1] Pop!
-Top of Stack-
[declaration-list`]
[general-declaration]
[ID]
-Bottom of Stack-

[ID] matches [Token: [ ID ] Identify: [ a ] Line: 1] Pop!
-Top of Stack-
[declaration-list`]
[general-declaration]
-Bottom of Stack-

Push:
	compound-stmt
	)
	params
	(

-Top of Stack-
[declaration-list`]
[compound-stmt]
[)]
[params]
[(]
-Bottom of Stack-

[(] matches [Token: [ ( ] Line: 1] Pop!
-Top of Stack-
[declaration-list`]
[compound-stmt]
[)]
[params]
-Bottom of Stack-

Push:
	param-list

-Top of Stack-
[declaration-list`]
[compound-stmt]
[)]
[param-list]
-Bottom of Stack-

Push:
	param-list`
	param

-Top of Stack-
[declaration-list`]
[compound-stmt]
[)]
[param-list`]
[param]
-Bottom of Stack-

Push:
	param-temp
	ID
	type-specifier

-Top of Stack-
[declaration-list`]
[compound-stmt]
[)]
[param-list`]
[param-temp]
[ID]
[type-specifier]
-Bottom of Stack-

Push:
	int

-Top of Stack-
[declaration-list`]
[compound-stmt]
[)]
[param-list`]
[param-temp]
[ID]
[int]
-Bottom of Stack-

[int] matches [Token: [ int ] Line: 1] Pop!
-Top of Stack-
[declaration-list`]
[compound-stmt]
[)]
[param-list`]
[param-temp]
[ID]
-Bottom of Stack-

[ID] matches [Token: [ ID ] Identify: [ b ] Line: 1] Pop!
-Top of Stack-
[declaration-list`]
[compound-stmt]
[)]
[param-list`]
[param-temp]
-Bottom of Stack-

empty entry,Pop!
-Top of Stack-
[declaration-list`]
[compound-stmt]
[)]
[param-list`]
-Bottom of Stack-

empty entry,Pop!
-Top of Stack-
[declaration-list`]
[compound-stmt]
[)]
-Bottom of Stack-

[)] matches [Token: [ ) ] Line: 1] Pop!
-Top of Stack-
[declaration-list`]
[compound-stmt]
-Bottom of Stack-

Push:
	}
	statement-list
	local-declarations
	{

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[local-declarations]
[{]
-Bottom of Stack-

[{] matches [Token: [ { ] Line: 1] Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[local-declarations]
-Bottom of Stack-

Push:
	local-declarations`

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[local-declarations`]
-Bottom of Stack-

empty entry,Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
-Bottom of Stack-

Push:
	statement-list
	statement

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[statement]
-Bottom of Stack-

Push:
	selection-stmt

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt]
-Bottom of Stack-

Push:
	selection-stmt-temp
	statement
	)
	expression
	(
	if

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
[)]
[expression]
[(]
[if]
-Bottom of Stack-

[if] matches [Token: [ if ] Line: 2] Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
[)]
[expression]
[(]
-Bottom of Stack-

[(] matches [Token: [ ( ] Line: 2] Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
[)]
[expression]
-Bottom of Stack-

Push:
	expression-sub
	ID

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
[)]
[expression-sub]
[ID]
-Bottom of Stack-

[ID] matches [Token: [ ID ] Identify: [ a ] Line: 2] Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
[)]
[expression-sub]
-Bottom of Stack-

Push:
	expression-sub-sub
	var

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
[)]
[expression-sub-sub]
[var]
-Bottom of Stack-

empty entry,Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
[)]
[expression-sub-sub]
-Bottom of Stack-

Push:
	expression-none

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
[)]
[expression-none]
-Bottom of Stack-

Push:
	simple-expression
	additive-expression-temp
	term-temp

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
[)]
[simple-expression]
[additive-expression-temp]
[term-temp]
-Bottom of Stack-

empty entry,Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
[)]
[simple-expression]
[additive-expression-temp]
-Bottom of Stack-

empty entry,Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
[)]
[simple-expression]
-Bottom of Stack-

Push:
	additive-expression
	relop

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
[)]
[additive-expression]
[relop]
-Bottom of Stack-

Push:
	==

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
[)]
[additive-expression]
[==]
-Bottom of Stack-

[==] matches [Token: [ == ] Line: 2] Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
[)]
[additive-expression]
-Bottom of Stack-

Push:
	additive-expression-temp
	term

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
[)]
[additive-expression-temp]
[term]
-Bottom of Stack-

Push:
	term-temp
	factor

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
[)]
[additive-expression-temp]
[term-temp]
[factor]
-Bottom of Stack-

Push:
	NUM

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
[)]
[additive-expression-temp]
[term-temp]
[NUM]
-Bottom of Stack-

[NUM] matches [Token: [ NUM ] Integer Value: [ 5 ] Line: 2] Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
[)]
[additive-expression-temp]
[term-temp]
-Bottom of Stack-

empty entry,Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
[)]
[additive-expression-temp]
-Bottom of Stack-

empty entry,Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
[)]
-Bottom of Stack-

[)] matches [Token: [ ) ] Line: 2] Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[statement]
-Bottom of Stack-

Push:
	return-stmt

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[return-stmt]
-Bottom of Stack-

Push:
	;
	expression
	return

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[;]
[expression]
[return]
-Bottom of Stack-

[return] matches [Token: [ return ] Line: 3] Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[;]
[expression]
-Bottom of Stack-

Push:
	expression-sub
	ID

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[;]
[expression-sub]
[ID]
-Bottom of Stack-

[ID] matches [Token: [ ID ] Identify: [ a ] Line: 3] Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[;]
[expression-sub]
-Bottom of Stack-

Push:
	expression-sub-sub
	var

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[;]
[expression-sub-sub]
[var]
-Bottom of Stack-

empty entry,Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[;]
[expression-sub-sub]
-Bottom of Stack-

Push:
	expression-none

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[;]
[expression-none]
-Bottom of Stack-

Push:
	simple-expression
	additive-expression-temp
	term-temp

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[;]
[simple-expression]
[additive-expression-temp]
[term-temp]
-Bottom of Stack-

empty entry,Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[;]
[simple-expression]
[additive-expression-temp]
-Bottom of Stack-

empty entry,Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[;]
[simple-expression]
-Bottom of Stack-

empty entry,Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
[;]
-Bottom of Stack-

[;] matches [Token: [ ; ] Line: 3] Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[selection-stmt-temp]
-Bottom of Stack-

Push:
	statement
	else

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[statement]
[else]
-Bottom of Stack-

[else] matches [Token: [ else ] Line: 4] Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[statement]
-Bottom of Stack-

Push:
	expression-stmt

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[expression-stmt]
-Bottom of Stack-

Push:
	;

-Top of Stack-
[declaration-list`]
[}]
[statement-list]
[;]
-Bottom of Stack-

[;] matches [Token: [ ; ] Line: 5] Pop!
-Top of Stack-
[declaration-list`]
[}]
[statement-list]
-Bottom of Stack-

empty entry,Pop!
-Top of Stack-
[declaration-list`]
[}]
-Bottom of Stack-

[}] matches [Token: [ } ] Line: 6] Pop!
