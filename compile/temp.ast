VariableDeclaration: a
FunctionDeclaration: INT fun ( 
)
CompoundStatement: {
	ExpressionStatement: 
		AssignExpression: 
			VariableExpression: a
			=
			BinaryExpression: 
				BinaryExpression: 
					VariableExpression: a
					MUL
					VariableExpression: a

				SUB
				VariableExpression: a


	ReturnStmt: 
		VariableExpression: a}

FunctionDeclaration: INT fun1 ( 
Variable: a
Variable: b
)
CompoundStatement: {
	IterationStmt: 
		BinaryExpression: 
			VariableExpression: a
			LTHAN
			LiteralExpression: 10
		CompoundStatement: {
			VariableDeclaration: b
			VariableDeclaration: b
			ExpressionStatement: 
				AssignExpression: 
					VariableExpression: a
					=
					BinaryExpression: 
						VariableExpression: a
						ADD
						LiteralExpression: 1


		}

	ReturnStmt: 
		VariableExpression: a}

FunctionDeclaration: VOID output ( 
Variable: a
)
CompoundStatement: {
}

FunctionDeclaration: INT main ( 
)
CompoundStatement: {
	VariableDeclaration: d
	VariableDeclaration: c
	VariableDeclaration: e
	SelectionStmt: if (
		BinaryExpression: 
			VariableExpression: a
			EQUAL
			LiteralExpression: 5
	 )
		ExpressionStatement: 
			AssignExpression: 
				VariableExpression: d
				=
				CallExpression: fun ( 
				 )



	else
		ExpressionStatement: 
			AssignExpression: 
				VariableExpression: d
				=
				CallExpression: fun1 ( 
					VariableExpression: d
					VariableExpression: e
				 )


	ExpressionStatement: 
		CallExpression: output ( 
			VariableExpression: d
		 )

	ReturnStmt: 
		LiteralExpression: 0}

