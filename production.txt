program:declaration-list
declaration-list:declaration-list declaration|declaration
declaration:type-specifier ID general-declaration
general-declaration:var-declaration|( params ) compound-stmt
var-declaration:;|[ NUM ] ;
var-declaration-sub:type-specifier ID var-declaration
type-specifier:int|double|bool|float|void
params:param-list|void
param-list:param-list , param|param
param:type-specifier ID param-temp
param-temp:empty|[ ]
compound-stmt:{ local-declarations statement-list }
local-declarations:local-declarations var-declaration-sub|empty
statement-list:statement statement-list|empty
statement:expression-stmt|compound-stmt|selection-stmt|iteration-stmt|return-stmt
expression-stmt:expression ;|;
selection-stmt:if ( expression ) statement selection-stmt-temp
selection-stmt-temp:empty|else statement
iteration-stmt:while ( expression ) statement
return-stmt:return ;|return expression ;
expression:ID expression-sub|( expression ) expression-none|NUM expression-none
expression-none:term-temp additive-expression-temp simple-expression
expression-sub:var expression-sub-sub|( args ) expression-none
expression-sub-sub:expression-none|= expression
var:empty|[ expression ]
simple-expression:empty|relop additive-expression
relop:<=|<|>|>=|==|!=
additive-expression:term additive-expression-temp
additive-expression-temp:addop term additive-expression-temp|empty
addop:+|-
term:factor term-temp
term-temp:mulop factor term-temp|empty
mulop:*|/
factor:( expression )|ID factor-temp|NUM
factor-temp:var|( args )
args:arg-list|empty
arg-list:arg-list , expression|expression