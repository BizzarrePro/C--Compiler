program:declaration-list
declaration-list:declaration-list declaration|declaration
declaration:type-specifier ID general-declaration|general-declaration
general-declaration:var-declaration|fun-declaration
var-declaration:;|[ NUM ] ;
type-specifier:int|void
fun-declaration:( params ) |compound-stmt
params:param|void
param:type-specifier ID param-temp
param-temp:empty|[ ]
compound-stmt:{ local-declarations statement-list }
local-declarations:local-declarations declaration|empty
statement-list:statement-list statement|empty
statement:expression-stmt|compound-stmt|selection-stmt|iteration-stmt|return-stmt
expression-stmt:expression ;|;
selection-stmt:if ( expression ) statement|if ( expression ) statement else statement
iteration-stmt:while ( expression ) statement
return-stmt:return ;|return expression ;
expression:var = expression|simple-expression
var:ID|ID [ expression ]
simple-expression:additive-expression relop additive-expression|additive-expression
relop:<=|<|>|>=|==|!=
additive-expression:additive-expression addop term|term
addop:+|-
term:term mulop factor|factor
mulop:*|/
factor:( expression )|var|call|NUM
call:ID ( args )
args:arg-list|empty
arg-list:arg-list , expression|expression